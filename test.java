/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>example.jflex</tt>
 */
class test {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\1\35\1\35\1\35\26\0\1\32\13\0\1\34\11\33"+
    "\7\0\32\31\4\0\1\31\1\0\1\1\1\2\1\6\1\20\1\7"+
    "\1\21\1\24\1\15\1\16\1\31\1\13\1\11\1\22\1\12\1\10"+
    "\1\25\1\31\1\5\1\3\1\4\1\17\1\26\1\27\1\23\1\14"+
    "\1\30\12\0\1\35\u1fa2\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\21\2\1\3\1\4\27\2\1\5\2\2"+
    "\1\5\36\2\1\5\51\2\1\5\7\2\1\5\25\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\36\0\u0258\0\u0276\0\u0294"+
    "\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384"+
    "\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u0438\0\u0456\0\u0474"+
    "\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u010e\0\u050a\0\u0528\0\u0546"+
    "\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636"+
    "\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726"+
    "\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816"+
    "\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906"+
    "\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6"+
    "\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6"+
    "\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6"+
    "\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6"+
    "\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6"+
    "\0\u07bc\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88"+
    "\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78"+
    "\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0\0\u100e\0\u102c\0\u104a\0\u1068"+
    "\0\u1086\0\u10a4\0\u10c2\0\u10e0\0\u10fe\0\u111c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\12\1\15\1\12\1\16\1\17"+
    "\2\12\1\20\1\21\1\22\1\23\2\12\1\2\1\24"+
    "\1\2\1\25\37\0\1\12\1\26\1\27\31\12\2\0"+
    "\4\12\1\30\2\12\1\31\3\12\1\32\20\12\2\0"+
    "\3\12\1\33\7\12\1\34\2\12\1\35\7\12\1\36"+
    "\5\12\2\0\4\12\1\37\7\12\1\40\17\12\2\0"+
    "\6\12\1\41\25\12\2\0\1\42\6\12\1\43\1\44"+
    "\3\12\1\45\17\12\2\0\10\12\1\46\1\47\10\12"+
    "\1\50\11\12\2\0\34\12\2\0\7\12\1\51\24\12"+
    "\2\0\1\52\5\12\1\53\25\12\2\0\11\12\1\54"+
    "\6\12\1\55\1\56\12\12\2\0\6\12\1\57\1\60"+
    "\24\12\2\0\7\12\1\61\1\62\4\12\1\63\16\12"+
    "\2\0\7\12\1\64\24\12\2\0\1\65\3\12\1\66"+
    "\11\12\1\67\15\12\2\0\7\12\1\70\24\12\2\0"+
    "\14\12\1\71\17\12\34\0\2\24\2\0\2\12\1\72"+
    "\31\12\2\0\2\12\1\73\31\12\2\0\6\12\1\74"+
    "\25\12\2\0\7\12\1\75\24\12\2\0\3\12\1\76"+
    "\30\12\2\0\1\77\33\12\2\0\11\12\1\100\22\12"+
    "\2\0\24\12\1\101\7\12\2\0\15\12\1\102\16\12"+
    "\2\0\1\103\12\12\1\55\20\12\2\0\4\12\1\104"+
    "\10\12\1\105\16\12\2\0\3\12\1\106\30\12\2\0"+
    "\2\12\1\76\1\107\30\12\2\0\11\12\1\110\22\12"+
    "\2\0\1\111\33\12\2\0\1\61\33\12\2\0\2\12"+
    "\1\76\31\12\2\0\16\12\1\112\15\12\2\0\3\12"+
    "\1\113\30\12\2\0\11\12\1\114\22\12\2\0\3\12"+
    "\1\115\30\12\2\0\26\12\1\55\5\12\2\0\2\12"+
    "\1\116\1\117\30\12\2\0\24\12\1\120\7\12\2\0"+
    "\20\12\1\121\13\12\2\0\16\12\1\122\15\12\2\0"+
    "\4\12\1\55\27\12\2\0\7\12\1\123\24\12\2\0"+
    "\11\12\1\124\22\12\2\0\3\12\1\125\30\12\2\0"+
    "\5\12\1\126\26\12\2\0\7\12\1\127\5\12\1\130"+
    "\16\12\2\0\1\12\1\131\32\12\2\0\10\12\1\132"+
    "\4\12\1\133\16\12\2\0\15\12\1\134\16\12\2\0"+
    "\3\12\1\135\30\12\2\0\6\12\1\136\25\12\2\0"+
    "\1\137\33\12\2\0\10\12\1\140\23\12\2\0\6\12"+
    "\1\55\25\12\2\0\3\12\1\141\30\12\2\0\5\12"+
    "\1\142\26\12\2\0\6\12\1\61\25\12\2\0\3\12"+
    "\1\107\30\12\2\0\11\12\1\143\22\12\2\0\7\12"+
    "\1\144\24\12\2\0\2\12\1\55\31\12\2\0\16\12"+
    "\1\145\15\12\2\0\5\12\1\146\26\12\2\0\2\12"+
    "\1\147\1\150\30\12\2\0\2\12\1\105\31\12\2\0"+
    "\21\12\1\55\12\12\2\0\6\12\1\151\25\12\2\0"+
    "\23\12\1\55\10\12\2\0\15\12\1\152\16\12\2\0"+
    "\3\12\1\153\30\12\2\0\6\12\1\154\25\12\2\0"+
    "\7\12\1\136\1\155\23\12\2\0\1\156\33\12\2\0"+
    "\1\12\1\134\32\12\2\0\1\147\33\12\2\0\1\157"+
    "\33\12\2\0\7\12\1\55\24\12\2\0\12\12\1\160"+
    "\21\12\2\0\3\12\1\161\30\12\2\0\25\12\1\162"+
    "\6\12\2\0\10\12\1\141\23\12\2\0\1\163\33\12"+
    "\2\0\17\12\1\55\14\12\2\0\10\12\1\76\23\12"+
    "\2\0\4\12\1\164\27\12\2\0\4\12\1\147\27\12"+
    "\2\0\12\12\1\55\21\12\2\0\6\12\1\165\25\12"+
    "\2\0\15\12\1\166\16\12\2\0\14\12\1\167\17\12"+
    "\2\0\2\12\1\170\31\12\2\0\26\12\1\171\5\12"+
    "\2\0\4\12\1\172\27\12\2\0\14\12\1\55\17\12"+
    "\2\0\3\12\1\55\30\12\2\0\15\12\1\173\16\12"+
    "\2\0\11\12\1\174\22\12\2\0\25\12\1\76\6\12"+
    "\2\0\1\175\33\12\2\0\4\12\1\176\27\12\2\0"+
    "\6\12\1\177\25\12\2\0\16\12\1\200\15\12\2\0"+
    "\10\12\1\201\23\12\2\0\1\202\33\12\2\0\6\12"+
    "\1\203\25\12\2\0\1\32\33\12\2\0\3\12\1\71"+
    "\30\12\2\0\1\204\33\12\2\0\1\172\33\12\2\0"+
    "\5\12\1\55\26\12\2\0\4\12\1\205\27\12\2\0"+
    "\15\12\1\206\16\12\2\0\11\12\1\55\22\12\2\0"+
    "\11\12\1\207\22\12\2\0\17\12\1\105\14\12\2\0"+
    "\11\12\1\210\22\12\2\0\20\12\1\211\13\12\2\0"+
    "\21\12\1\212\12\12\2\0\10\12\1\147\23\12\2\0"+
    "\10\12\1\213\23\12\2\0\23\12\1\76\10\12\2\0"+
    "\5\12\1\214\26\12\2\0\5\12\1\147\26\12\2\0"+
    "\7\12\1\215\24\12\2\0\6\12\1\172\25\12\2\0"+
    "\16\12\1\76\15\12\2\0\5\12\1\216\26\12\2\0"+
    "\1\217\33\12\2\0\6\12\1\220\25\12\2\0\13\12"+
    "\1\55\20\12\2\0\3\12\1\221\30\12\2\0\11\12"+
    "\1\222\22\12\2\0\6\12\1\223\25\12\2\0\5\12"+
    "\1\76\26\12\2\0\11\12\1\224\22\12\2\0\6\12"+
    "\1\133\25\12\2\0\15\12\1\225\16\12\2\0\7\12"+
    "\1\226\24\12\2\0\3\12\1\105\30\12\2\0\27\12"+
    "\1\221\4\12\2\0\20\12\1\55\13\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4410];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\201\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  test(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Do nothing */
            }
          case 6: break;
          case 2: 
            { System.out.printf(
"Identifier %s at line %d, column %d\n",
yytext(), yyline, yycolumn);
            }
          case 7: break;
          case 3: 
            { System.out.printf(
"Interger %s at line %d, column %d\n",
yytext(), yyline, yycolumn);
            }
          case 8: break;
          case 4: 
            { System.out.print(yytext());
            }
          case 9: break;
          case 5: 
            { System.out.printf(
"Keyword %s at line %d, column %d\n",
yytext(), yyline, yycolumn);
            }
          case 10: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java test [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        test scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new test(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
